/// Configuracion de la base de datos
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// Generador de codigo para el cliente de Prisma
generator client {
  provider = "prisma-client-js"
}

/// Modelos para el usuario 
model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  password           String?
  accounts           Account[]
  passwordResetToken PasswordResetToken[]

  /// Campos editables por el usuario
  name               String?
  description        String?
  image              String?
  phoneNumber        String?

  /// Campos necesarios para Vender
  emailVerified      DateTime?
  phoneVerified      DateTime?
  location           String?
  businessName       String?
  bussinesCategory   String[] @default([])

  /// Productos del usuario
  products           Product[]

  /// Relaci√≥n con favoritos
  favorites          Favorite[]

  /// Relacion con chats
  roomsAsVendor      Room[]    @relation("VendorRooms")
  roomsAsBuyer       Room[]    @relation("BuyerRooms")
  messages           Message[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}


// Modelo para los productos
model Product {
  id                String   @id @default(uuid())
  name              String
  description       String
  price             String
  images            String[]
  oemNumber         String
  category          String
  brand             String
  model             String
  year              String
  tipoDeVehiculo    String
  condition         String
  status            String
  typeOfPiece       String
  location          String

  offer             Boolean?
  offerPrice        String?

  // Relaciones
  vendorId          String
  vendor            User     @relation(fields: [vendorId], references: [id])
  rooms             Room[]
  favorites         Favorite[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

/// Modelo de Favoritos
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, productId]) 
}

// Modelos de chat en tiempo real
/// Conversaciones (chat)
model Room {
  id        String   @id @default(cuid())
  productId String?
  vendorId  String
  buyerId   String
  createdAt DateTime @default(now())

  product Product? @relation(fields: [productId], references: [id])
  vendor  User     @relation("VendorRooms", fields: [vendorId], references: [id])
  buyer   User     @relation("BuyerRooms", fields: [buyerId], references: [id])
  messages Message[]
}

model Message {
  id        String   @id @default(cuid())
  roomId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  room   Room @relation(fields: [roomId], references: [id])
  sender User @relation(fields: [senderId], references: [id])

  @@index([roomId])
  @@index([senderId])
}