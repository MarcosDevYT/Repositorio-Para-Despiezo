/// Configuracion de la base de datos
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// Generador de codigo para el cliente de Prisma
generator client {
  provider = "prisma-client-js"
}

/// Modelos para el usuario 
model User {
  id                      String               @id @default(cuid())
  email                   String               @unique
  password                String?
  accounts                Account[]
  passwordResetToken      PasswordResetToken[]

  /// Campos editables por el usuario
  name                    String?
  description             String?
  image                   String?
  phoneNumber             String?
  addresses               Address[]

  /// Campos necesarios para Vender
  emailVerified           DateTime?
  phoneVerified           DateTime?
  location                String?
  businessName            String?
  bussinesCategory        String[] @default([])

  // Stripe Connect
  connectedAccountId      String? @unique
  stripeConnectedLinked   Boolean @default(false)

  /// Productos del usuario
  products                Product[]

  /// Relación con favoritos
  favorites               Favorite[]

  /// Relación con ordenes
  ordersAsBuyer           Orden[] @relation("BuyerOrders")
  ordersAsVendor          Orden[] @relation("VendorOrders")

  /// Relacion con searchHistory
  searchHistory           SearchHistory[]

   // Relación con productos vistos
  viewedProducts          UserProductView[] 


  /// Relacion con chats
  roomsAsVendor           Room[]    @relation("VendorRooms")
  roomsAsBuyer            Room[]    @relation("BuyerRooms")
  messages                Message[]

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

// Modelo de direccion del usuario
model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  street    String
  number    String
  city      String
  postalCode String
  country   String

  isDefault Boolean  @default(false)
}

// Modelo de producto
model Product {
  id             String    @id @default(uuid())
  name           String
  description    String
  price          String 
  images         String[]
  oemNumber      String
  brand          String
  model          String
  year           String
  tipoDeVehiculo String
  condition      String
  status         String
  typeOfPiece    String
  location       String
  category       String
  subcategory    String?

  offer          Boolean?
  offerPrice     String?

  // Campos de medidas
  weight         Float?     // Peso en kg
  length         Float?     // Largo en cm
  width          Float?     // Ancho en cm
  height         Float?     // Alto en cm

  // Campos para destacar Producto
  featuredUntil  DateTime?                   // hasta qué fecha se mantiene destacado
  featuredAt     DateTime?

  // Analíticas
  clicks         Int       @default(0)       // cantidad de clics

  // Relaciones
  vendorId       String
  vendor         User       @relation(fields: [vendorId], references: [id])
  rooms          Room[]
  favorites      Favorite[]
  orders         Orden[]

  // Relación inversa con vistas de usuarios
  userViews      UserProductView[]

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

// Modelo de productos que vio el usuario
model UserProductView {
  id        String   @id @default(cuid())
  userId    String
  productId String
  viewedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // un producto por usuario, se puede actualizar clicks
  @@index([userId])
  @@index([productId])
}


// Modelo de orden
model Orden {
  id                  String   @id @default(cuid())

  // Relaciones
  productId           String
  product             Product  @relation(fields: [productId], references: [id])
  buyerId             String
  buyer               User     @relation("BuyerOrders", fields: [buyerId], references: [id])
  vendorId            String
  vendor              User     @relation("VendorOrders", fields: [vendorId], references: [id])

  // Stripe
  stripeSessionId     String   @unique
  stripePaymentIntent String?

  // Dinero
  amountTotal         Int
  vendorAmount        Int
  feeAmount           Int

  // Estado de la orden
  status              OrderStatus @default(created)
  payoutReleased      Boolean @default(false)

  // Envío y logística
  trackingNumber      String?
  trackingUrl         String?
  shippingStatus      String @default("pending")
  shippingProvider    String?
  shippingLabelUrl    String?

  // Dirección de envío
  shippingName        String?
  shippingAddressLine1 String?
  shippingAddressLine2 String?
  shippingCity        String?
  shippingPostalCode  String?
  shippingCountry     String?
  shippingPhone       String?

  // Control de tiempo
  releaseAt           DateTime?
  releasedAt          DateTime?
  stripeTransferId    String?

  // Devoluciones
  refundRequested     Boolean @default(false)
  refundProcessed     Boolean @default(false)
  refundStripeId      String?

  // Notas
  buyerNote           String?
  vendorNote          String?

  // Tiempos
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

enum OrderStatus {
  created
  paid
  shipped
  delivered
  completed
  canceled
  refunded
}

/// Modelo de Favoritos
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, productId]) 
}

/// Modelos de tablas para busquedas indexadas

/// Modelo para almacenar las busquedas
model SearchHistory {
  id        String   @id @default(cuid())
  query     String 
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

/// Modelo de busquedas populares
model SearchLog {
  id     String @id @default(uuid())
  query  String @unique
  clicks Int    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// Modelos de chat en tiempo real
/// Conversaciones (chat)
model Room {
  id        String   @id @default(cuid())
  productId String?
  vendorId  String
  buyerId   String
  createdAt DateTime @default(now())

  product Product? @relation(fields: [productId], references: [id])
  vendor  User     @relation("VendorRooms", fields: [vendorId], references: [id])
  buyer   User     @relation("BuyerRooms", fields: [buyerId], references: [id])
  messages Message[]
}

model Message {
  id        String   @id @default(cuid())
  roomId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  room   Room @relation(fields: [roomId], references: [id])
  sender User @relation(fields: [senderId], references: [id])

  @@index([roomId])
  @@index([senderId])
}