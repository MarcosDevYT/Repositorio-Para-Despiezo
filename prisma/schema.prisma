/// Configuracion de la base de datos
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// Generador de codigo para el cliente de Prisma
generator client {
  provider = "prisma-client-js"
}

/// Modelos para el usuario 
model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  password           String?
  emailVerified      DateTime?
  phoneVerified      DateTime?
  accounts           Account[]
  passwordResetToken PasswordResetToken[]

  /// Campos editables por el usuario
  name               String?
  businessName       String?
  image              String?
  phoneNumber        String?
  location           String?

  /// Productos del usuario
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  userId  String
  token   String   @unique
  expires DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}


// Modelo para los productos
model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       String
  images      String[]
  oemNumber   String
  category    String
  brand       String
  model       String
  year        String
  condition   String
  status      String
  typeOfPiece String
  location    String

  offer       Boolean?
  offerPrice  String?

  // Relaciones
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
