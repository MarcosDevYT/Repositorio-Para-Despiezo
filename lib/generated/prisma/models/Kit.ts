
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Kit` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Kit
 * 
 */
export type KitModel = runtime.Types.Result.DefaultSelection<Prisma.$KitPayload>

export type AggregateKit = {
  _count: KitCountAggregateOutputType | null
  _avg: KitAvgAggregateOutputType | null
  _sum: KitSumAggregateOutputType | null
  _min: KitMinAggregateOutputType | null
  _max: KitMaxAggregateOutputType | null
}

export type KitAvgAggregateOutputType = {
  price: number | null
  discount: number | null
}

export type KitSumAggregateOutputType = {
  price: number | null
  discount: number | null
}

export type KitMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  price: number | null
  discount: number | null
  vendorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type KitMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  price: number | null
  discount: number | null
  vendorId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type KitCountAggregateOutputType = {
  id: number
  name: number
  description: number
  price: number
  discount: number
  images: number
  vendorId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type KitAvgAggregateInputType = {
  price?: true
  discount?: true
}

export type KitSumAggregateInputType = {
  price?: true
  discount?: true
}

export type KitMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  price?: true
  discount?: true
  vendorId?: true
  createdAt?: true
  updatedAt?: true
}

export type KitMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  price?: true
  discount?: true
  vendorId?: true
  createdAt?: true
  updatedAt?: true
}

export type KitCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  price?: true
  discount?: true
  images?: true
  vendorId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type KitAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Kit to aggregate.
   */
  where?: Prisma.KitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Kits to fetch.
   */
  orderBy?: Prisma.KitOrderByWithRelationInput | Prisma.KitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.KitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Kits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Kits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Kits
  **/
  _count?: true | KitCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: KitAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: KitSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: KitMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: KitMaxAggregateInputType
}

export type GetKitAggregateType<T extends KitAggregateArgs> = {
      [P in keyof T & keyof AggregateKit]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateKit[P]>
    : Prisma.GetScalarType<T[P], AggregateKit[P]>
}




export type KitGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.KitWhereInput
  orderBy?: Prisma.KitOrderByWithAggregationInput | Prisma.KitOrderByWithAggregationInput[]
  by: Prisma.KitScalarFieldEnum[] | Prisma.KitScalarFieldEnum
  having?: Prisma.KitScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: KitCountAggregateInputType | true
  _avg?: KitAvgAggregateInputType
  _sum?: KitSumAggregateInputType
  _min?: KitMinAggregateInputType
  _max?: KitMaxAggregateInputType
}

export type KitGroupByOutputType = {
  id: string
  name: string
  description: string | null
  price: number
  discount: number | null
  images: string[]
  vendorId: string
  createdAt: Date
  updatedAt: Date
  _count: KitCountAggregateOutputType | null
  _avg: KitAvgAggregateOutputType | null
  _sum: KitSumAggregateOutputType | null
  _min: KitMinAggregateOutputType | null
  _max: KitMaxAggregateOutputType | null
}

type GetKitGroupByPayload<T extends KitGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<KitGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof KitGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], KitGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], KitGroupByOutputType[P]>
      }
    >
  >



export type KitWhereInput = {
  AND?: Prisma.KitWhereInput | Prisma.KitWhereInput[]
  OR?: Prisma.KitWhereInput[]
  NOT?: Prisma.KitWhereInput | Prisma.KitWhereInput[]
  id?: Prisma.StringFilter<"Kit"> | string
  name?: Prisma.StringFilter<"Kit"> | string
  description?: Prisma.StringNullableFilter<"Kit"> | string | null
  price?: Prisma.FloatFilter<"Kit"> | number
  discount?: Prisma.FloatNullableFilter<"Kit"> | number | null
  images?: Prisma.StringNullableListFilter<"Kit">
  vendorId?: Prisma.StringFilter<"Kit"> | string
  createdAt?: Prisma.DateTimeFilter<"Kit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Kit"> | Date | string
  vendor?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  products?: Prisma.KitProductListRelationFilter
  orderItems?: Prisma.OrderItemListRelationFilter
}

export type KitOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  price?: Prisma.SortOrder
  discount?: Prisma.SortOrderInput | Prisma.SortOrder
  images?: Prisma.SortOrder
  vendorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  vendor?: Prisma.UserOrderByWithRelationInput
  products?: Prisma.KitProductOrderByRelationAggregateInput
  orderItems?: Prisma.OrderItemOrderByRelationAggregateInput
}

export type KitWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.KitWhereInput | Prisma.KitWhereInput[]
  OR?: Prisma.KitWhereInput[]
  NOT?: Prisma.KitWhereInput | Prisma.KitWhereInput[]
  name?: Prisma.StringFilter<"Kit"> | string
  description?: Prisma.StringNullableFilter<"Kit"> | string | null
  price?: Prisma.FloatFilter<"Kit"> | number
  discount?: Prisma.FloatNullableFilter<"Kit"> | number | null
  images?: Prisma.StringNullableListFilter<"Kit">
  vendorId?: Prisma.StringFilter<"Kit"> | string
  createdAt?: Prisma.DateTimeFilter<"Kit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Kit"> | Date | string
  vendor?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  products?: Prisma.KitProductListRelationFilter
  orderItems?: Prisma.OrderItemListRelationFilter
}, "id">

export type KitOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  price?: Prisma.SortOrder
  discount?: Prisma.SortOrderInput | Prisma.SortOrder
  images?: Prisma.SortOrder
  vendorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.KitCountOrderByAggregateInput
  _avg?: Prisma.KitAvgOrderByAggregateInput
  _max?: Prisma.KitMaxOrderByAggregateInput
  _min?: Prisma.KitMinOrderByAggregateInput
  _sum?: Prisma.KitSumOrderByAggregateInput
}

export type KitScalarWhereWithAggregatesInput = {
  AND?: Prisma.KitScalarWhereWithAggregatesInput | Prisma.KitScalarWhereWithAggregatesInput[]
  OR?: Prisma.KitScalarWhereWithAggregatesInput[]
  NOT?: Prisma.KitScalarWhereWithAggregatesInput | Prisma.KitScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Kit"> | string
  name?: Prisma.StringWithAggregatesFilter<"Kit"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Kit"> | string | null
  price?: Prisma.FloatWithAggregatesFilter<"Kit"> | number
  discount?: Prisma.FloatNullableWithAggregatesFilter<"Kit"> | number | null
  images?: Prisma.StringNullableListFilter<"Kit">
  vendorId?: Prisma.StringWithAggregatesFilter<"Kit"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Kit"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Kit"> | Date | string
}

export type KitCreateInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  discount?: number | null
  images?: Prisma.KitCreateimagesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  vendor: Prisma.UserCreateNestedOneWithoutKitsInput
  products?: Prisma.KitProductCreateNestedManyWithoutKitInput
  orderItems?: Prisma.OrderItemCreateNestedManyWithoutKitInput
}

export type KitUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  discount?: number | null
  images?: Prisma.KitCreateimagesInput | string[]
  vendorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  products?: Prisma.KitProductUncheckedCreateNestedManyWithoutKitInput
  orderItems?: Prisma.OrderItemUncheckedCreateNestedManyWithoutKitInput
}

export type KitUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  discount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  images?: Prisma.KitUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  vendor?: Prisma.UserUpdateOneRequiredWithoutKitsNestedInput
  products?: Prisma.KitProductUpdateManyWithoutKitNestedInput
  orderItems?: Prisma.OrderItemUpdateManyWithoutKitNestedInput
}

export type KitUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  discount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  images?: Prisma.KitUpdateimagesInput | string[]
  vendorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  products?: Prisma.KitProductUncheckedUpdateManyWithoutKitNestedInput
  orderItems?: Prisma.OrderItemUncheckedUpdateManyWithoutKitNestedInput
}

export type KitCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  discount?: number | null
  images?: Prisma.KitCreateimagesInput | string[]
  vendorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type KitUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  discount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  images?: Prisma.KitUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KitUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  discount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  images?: Prisma.KitUpdateimagesInput | string[]
  vendorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type KitListRelationFilter = {
  every?: Prisma.KitWhereInput
  some?: Prisma.KitWhereInput
  none?: Prisma.KitWhereInput
}

export type KitOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type KitCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  discount?: Prisma.SortOrder
  images?: Prisma.SortOrder
  vendorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type KitAvgOrderByAggregateInput = {
  price?: Prisma.SortOrder
  discount?: Prisma.SortOrder
}

export type KitMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  discount?: Prisma.SortOrder
  vendorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type KitMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  discount?: Prisma.SortOrder
  vendorId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type KitSumOrderByAggregateInput = {
  price?: Prisma.SortOrder
  discount?: Prisma.SortOrder
}

export type KitScalarRelationFilter = {
  is?: Prisma.KitWhereInput
  isNot?: Prisma.KitWhereInput
}

export type KitNullableScalarRelationFilter = {
  is?: Prisma.KitWhereInput | null
  isNot?: Prisma.KitWhereInput | null
}

export type KitCreateNestedManyWithoutVendorInput = {
  create?: Prisma.XOR<Prisma.KitCreateWithoutVendorInput, Prisma.KitUncheckedCreateWithoutVendorInput> | Prisma.KitCreateWithoutVendorInput[] | Prisma.KitUncheckedCreateWithoutVendorInput[]
  connectOrCreate?: Prisma.KitCreateOrConnectWithoutVendorInput | Prisma.KitCreateOrConnectWithoutVendorInput[]
  createMany?: Prisma.KitCreateManyVendorInputEnvelope
  connect?: Prisma.KitWhereUniqueInput | Prisma.KitWhereUniqueInput[]
}

export type KitUncheckedCreateNestedManyWithoutVendorInput = {
  create?: Prisma.XOR<Prisma.KitCreateWithoutVendorInput, Prisma.KitUncheckedCreateWithoutVendorInput> | Prisma.KitCreateWithoutVendorInput[] | Prisma.KitUncheckedCreateWithoutVendorInput[]
  connectOrCreate?: Prisma.KitCreateOrConnectWithoutVendorInput | Prisma.KitCreateOrConnectWithoutVendorInput[]
  createMany?: Prisma.KitCreateManyVendorInputEnvelope
  connect?: Prisma.KitWhereUniqueInput | Prisma.KitWhereUniqueInput[]
}

export type KitUpdateManyWithoutVendorNestedInput = {
  create?: Prisma.XOR<Prisma.KitCreateWithoutVendorInput, Prisma.KitUncheckedCreateWithoutVendorInput> | Prisma.KitCreateWithoutVendorInput[] | Prisma.KitUncheckedCreateWithoutVendorInput[]
  connectOrCreate?: Prisma.KitCreateOrConnectWithoutVendorInput | Prisma.KitCreateOrConnectWithoutVendorInput[]
  upsert?: Prisma.KitUpsertWithWhereUniqueWithoutVendorInput | Prisma.KitUpsertWithWhereUniqueWithoutVendorInput[]
  createMany?: Prisma.KitCreateManyVendorInputEnvelope
  set?: Prisma.KitWhereUniqueInput | Prisma.KitWhereUniqueInput[]
  disconnect?: Prisma.KitWhereUniqueInput | Prisma.KitWhereUniqueInput[]
  delete?: Prisma.KitWhereUniqueInput | Prisma.KitWhereUniqueInput[]
  connect?: Prisma.KitWhereUniqueInput | Prisma.KitWhereUniqueInput[]
  update?: Prisma.KitUpdateWithWhereUniqueWithoutVendorInput | Prisma.KitUpdateWithWhereUniqueWithoutVendorInput[]
  updateMany?: Prisma.KitUpdateManyWithWhereWithoutVendorInput | Prisma.KitUpdateManyWithWhereWithoutVendorInput[]
  deleteMany?: Prisma.KitScalarWhereInput | Prisma.KitScalarWhereInput[]
}

export type KitUncheckedUpdateManyWithoutVendorNestedInput = {
  create?: Prisma.XOR<Prisma.KitCreateWithoutVendorInput, Prisma.KitUncheckedCreateWithoutVendorInput> | Prisma.KitCreateWithoutVendorInput[] | Prisma.KitUncheckedCreateWithoutVendorInput[]
  connectOrCreate?: Prisma.KitCreateOrConnectWithoutVendorInput | Prisma.KitCreateOrConnectWithoutVendorInput[]
  upsert?: Prisma.KitUpsertWithWhereUniqueWithoutVendorInput | Prisma.KitUpsertWithWhereUniqueWithoutVendorInput[]
  createMany?: Prisma.KitCreateManyVendorInputEnvelope
  set?: Prisma.KitWhereUniqueInput | Prisma.KitWhereUniqueInput[]
  disconnect?: Prisma.KitWhereUniqueInput | Prisma.KitWhereUniqueInput[]
  delete?: Prisma.KitWhereUniqueInput | Prisma.KitWhereUniqueInput[]
  connect?: Prisma.KitWhereUniqueInput | Prisma.KitWhereUniqueInput[]
  update?: Prisma.KitUpdateWithWhereUniqueWithoutVendorInput | Prisma.KitUpdateWithWhereUniqueWithoutVendorInput[]
  updateMany?: Prisma.KitUpdateManyWithWhereWithoutVendorInput | Prisma.KitUpdateManyWithWhereWithoutVendorInput[]
  deleteMany?: Prisma.KitScalarWhereInput | Prisma.KitScalarWhereInput[]
}

export type KitCreateimagesInput = {
  set: string[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type KitUpdateimagesInput = {
  set?: string[]
  push?: string | string[]
}

export type KitCreateNestedOneWithoutProductsInput = {
  create?: Prisma.XOR<Prisma.KitCreateWithoutProductsInput, Prisma.KitUncheckedCreateWithoutProductsInput>
  connectOrCreate?: Prisma.KitCreateOrConnectWithoutProductsInput
  connect?: Prisma.KitWhereUniqueInput
}

export type KitUpdateOneRequiredWithoutProductsNestedInput = {
  create?: Prisma.XOR<Prisma.KitCreateWithoutProductsInput, Prisma.KitUncheckedCreateWithoutProductsInput>
  connectOrCreate?: Prisma.KitCreateOrConnectWithoutProductsInput
  upsert?: Prisma.KitUpsertWithoutProductsInput
  connect?: Prisma.KitWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.KitUpdateToOneWithWhereWithoutProductsInput, Prisma.KitUpdateWithoutProductsInput>, Prisma.KitUncheckedUpdateWithoutProductsInput>
}

export type KitCreateNestedOneWithoutOrderItemsInput = {
  create?: Prisma.XOR<Prisma.KitCreateWithoutOrderItemsInput, Prisma.KitUncheckedCreateWithoutOrderItemsInput>
  connectOrCreate?: Prisma.KitCreateOrConnectWithoutOrderItemsInput
  connect?: Prisma.KitWhereUniqueInput
}

export type KitUpdateOneWithoutOrderItemsNestedInput = {
  create?: Prisma.XOR<Prisma.KitCreateWithoutOrderItemsInput, Prisma.KitUncheckedCreateWithoutOrderItemsInput>
  connectOrCreate?: Prisma.KitCreateOrConnectWithoutOrderItemsInput
  upsert?: Prisma.KitUpsertWithoutOrderItemsInput
  disconnect?: Prisma.KitWhereInput | boolean
  delete?: Prisma.KitWhereInput | boolean
  connect?: Prisma.KitWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.KitUpdateToOneWithWhereWithoutOrderItemsInput, Prisma.KitUpdateWithoutOrderItemsInput>, Prisma.KitUncheckedUpdateWithoutOrderItemsInput>
}

export type KitCreateWithoutVendorInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  discount?: number | null
  images?: Prisma.KitCreateimagesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  products?: Prisma.KitProductCreateNestedManyWithoutKitInput
  orderItems?: Prisma.OrderItemCreateNestedManyWithoutKitInput
}

export type KitUncheckedCreateWithoutVendorInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  discount?: number | null
  images?: Prisma.KitCreateimagesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  products?: Prisma.KitProductUncheckedCreateNestedManyWithoutKitInput
  orderItems?: Prisma.OrderItemUncheckedCreateNestedManyWithoutKitInput
}

export type KitCreateOrConnectWithoutVendorInput = {
  where: Prisma.KitWhereUniqueInput
  create: Prisma.XOR<Prisma.KitCreateWithoutVendorInput, Prisma.KitUncheckedCreateWithoutVendorInput>
}

export type KitCreateManyVendorInputEnvelope = {
  data: Prisma.KitCreateManyVendorInput | Prisma.KitCreateManyVendorInput[]
  skipDuplicates?: boolean
}

export type KitUpsertWithWhereUniqueWithoutVendorInput = {
  where: Prisma.KitWhereUniqueInput
  update: Prisma.XOR<Prisma.KitUpdateWithoutVendorInput, Prisma.KitUncheckedUpdateWithoutVendorInput>
  create: Prisma.XOR<Prisma.KitCreateWithoutVendorInput, Prisma.KitUncheckedCreateWithoutVendorInput>
}

export type KitUpdateWithWhereUniqueWithoutVendorInput = {
  where: Prisma.KitWhereUniqueInput
  data: Prisma.XOR<Prisma.KitUpdateWithoutVendorInput, Prisma.KitUncheckedUpdateWithoutVendorInput>
}

export type KitUpdateManyWithWhereWithoutVendorInput = {
  where: Prisma.KitScalarWhereInput
  data: Prisma.XOR<Prisma.KitUpdateManyMutationInput, Prisma.KitUncheckedUpdateManyWithoutVendorInput>
}

export type KitScalarWhereInput = {
  AND?: Prisma.KitScalarWhereInput | Prisma.KitScalarWhereInput[]
  OR?: Prisma.KitScalarWhereInput[]
  NOT?: Prisma.KitScalarWhereInput | Prisma.KitScalarWhereInput[]
  id?: Prisma.StringFilter<"Kit"> | string
  name?: Prisma.StringFilter<"Kit"> | string
  description?: Prisma.StringNullableFilter<"Kit"> | string | null
  price?: Prisma.FloatFilter<"Kit"> | number
  discount?: Prisma.FloatNullableFilter<"Kit"> | number | null
  images?: Prisma.StringNullableListFilter<"Kit">
  vendorId?: Prisma.StringFilter<"Kit"> | string
  createdAt?: Prisma.DateTimeFilter<"Kit"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Kit"> | Date | string
}

export type KitCreateWithoutProductsInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  discount?: number | null
  images?: Prisma.KitCreateimagesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  vendor: Prisma.UserCreateNestedOneWithoutKitsInput
  orderItems?: Prisma.OrderItemCreateNestedManyWithoutKitInput
}

export type KitUncheckedCreateWithoutProductsInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  discount?: number | null
  images?: Prisma.KitCreateimagesInput | string[]
  vendorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  orderItems?: Prisma.OrderItemUncheckedCreateNestedManyWithoutKitInput
}

export type KitCreateOrConnectWithoutProductsInput = {
  where: Prisma.KitWhereUniqueInput
  create: Prisma.XOR<Prisma.KitCreateWithoutProductsInput, Prisma.KitUncheckedCreateWithoutProductsInput>
}

export type KitUpsertWithoutProductsInput = {
  update: Prisma.XOR<Prisma.KitUpdateWithoutProductsInput, Prisma.KitUncheckedUpdateWithoutProductsInput>
  create: Prisma.XOR<Prisma.KitCreateWithoutProductsInput, Prisma.KitUncheckedCreateWithoutProductsInput>
  where?: Prisma.KitWhereInput
}

export type KitUpdateToOneWithWhereWithoutProductsInput = {
  where?: Prisma.KitWhereInput
  data: Prisma.XOR<Prisma.KitUpdateWithoutProductsInput, Prisma.KitUncheckedUpdateWithoutProductsInput>
}

export type KitUpdateWithoutProductsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  discount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  images?: Prisma.KitUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  vendor?: Prisma.UserUpdateOneRequiredWithoutKitsNestedInput
  orderItems?: Prisma.OrderItemUpdateManyWithoutKitNestedInput
}

export type KitUncheckedUpdateWithoutProductsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  discount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  images?: Prisma.KitUpdateimagesInput | string[]
  vendorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  orderItems?: Prisma.OrderItemUncheckedUpdateManyWithoutKitNestedInput
}

export type KitCreateWithoutOrderItemsInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  discount?: number | null
  images?: Prisma.KitCreateimagesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
  vendor: Prisma.UserCreateNestedOneWithoutKitsInput
  products?: Prisma.KitProductCreateNestedManyWithoutKitInput
}

export type KitUncheckedCreateWithoutOrderItemsInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  discount?: number | null
  images?: Prisma.KitCreateimagesInput | string[]
  vendorId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  products?: Prisma.KitProductUncheckedCreateNestedManyWithoutKitInput
}

export type KitCreateOrConnectWithoutOrderItemsInput = {
  where: Prisma.KitWhereUniqueInput
  create: Prisma.XOR<Prisma.KitCreateWithoutOrderItemsInput, Prisma.KitUncheckedCreateWithoutOrderItemsInput>
}

export type KitUpsertWithoutOrderItemsInput = {
  update: Prisma.XOR<Prisma.KitUpdateWithoutOrderItemsInput, Prisma.KitUncheckedUpdateWithoutOrderItemsInput>
  create: Prisma.XOR<Prisma.KitCreateWithoutOrderItemsInput, Prisma.KitUncheckedCreateWithoutOrderItemsInput>
  where?: Prisma.KitWhereInput
}

export type KitUpdateToOneWithWhereWithoutOrderItemsInput = {
  where?: Prisma.KitWhereInput
  data: Prisma.XOR<Prisma.KitUpdateWithoutOrderItemsInput, Prisma.KitUncheckedUpdateWithoutOrderItemsInput>
}

export type KitUpdateWithoutOrderItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  discount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  images?: Prisma.KitUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  vendor?: Prisma.UserUpdateOneRequiredWithoutKitsNestedInput
  products?: Prisma.KitProductUpdateManyWithoutKitNestedInput
}

export type KitUncheckedUpdateWithoutOrderItemsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  discount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  images?: Prisma.KitUpdateimagesInput | string[]
  vendorId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  products?: Prisma.KitProductUncheckedUpdateManyWithoutKitNestedInput
}

export type KitCreateManyVendorInput = {
  id?: string
  name: string
  description?: string | null
  price: number
  discount?: number | null
  images?: Prisma.KitCreateimagesInput | string[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type KitUpdateWithoutVendorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  discount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  images?: Prisma.KitUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  products?: Prisma.KitProductUpdateManyWithoutKitNestedInput
  orderItems?: Prisma.OrderItemUpdateManyWithoutKitNestedInput
}

export type KitUncheckedUpdateWithoutVendorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  discount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  images?: Prisma.KitUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  products?: Prisma.KitProductUncheckedUpdateManyWithoutKitNestedInput
  orderItems?: Prisma.OrderItemUncheckedUpdateManyWithoutKitNestedInput
}

export type KitUncheckedUpdateManyWithoutVendorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  discount?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  images?: Prisma.KitUpdateimagesInput | string[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type KitCountOutputType
 */

export type KitCountOutputType = {
  products: number
  orderItems: number
}

export type KitCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  products?: boolean | KitCountOutputTypeCountProductsArgs
  orderItems?: boolean | KitCountOutputTypeCountOrderItemsArgs
}

/**
 * KitCountOutputType without action
 */
export type KitCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KitCountOutputType
   */
  select?: Prisma.KitCountOutputTypeSelect<ExtArgs> | null
}

/**
 * KitCountOutputType without action
 */
export type KitCountOutputTypeCountProductsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.KitProductWhereInput
}

/**
 * KitCountOutputType without action
 */
export type KitCountOutputTypeCountOrderItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderItemWhereInput
}


export type KitSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  price?: boolean
  discount?: boolean
  images?: boolean
  vendorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  vendor?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  products?: boolean | Prisma.Kit$productsArgs<ExtArgs>
  orderItems?: boolean | Prisma.Kit$orderItemsArgs<ExtArgs>
  _count?: boolean | Prisma.KitCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["kit"]>

export type KitSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  price?: boolean
  discount?: boolean
  images?: boolean
  vendorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  vendor?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["kit"]>

export type KitSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  price?: boolean
  discount?: boolean
  images?: boolean
  vendorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  vendor?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["kit"]>

export type KitSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  price?: boolean
  discount?: boolean
  images?: boolean
  vendorId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type KitOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "price" | "discount" | "images" | "vendorId" | "createdAt" | "updatedAt", ExtArgs["result"]["kit"]>
export type KitInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  vendor?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  products?: boolean | Prisma.Kit$productsArgs<ExtArgs>
  orderItems?: boolean | Prisma.Kit$orderItemsArgs<ExtArgs>
  _count?: boolean | Prisma.KitCountOutputTypeDefaultArgs<ExtArgs>
}
export type KitIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  vendor?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type KitIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  vendor?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $KitPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Kit"
  objects: {
    vendor: Prisma.$UserPayload<ExtArgs>
    products: Prisma.$KitProductPayload<ExtArgs>[]
    orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    price: number
    discount: number | null
    images: string[]
    vendorId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["kit"]>
  composites: {}
}

export type KitGetPayload<S extends boolean | null | undefined | KitDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$KitPayload, S>

export type KitCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<KitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: KitCountAggregateInputType | true
  }

export interface KitDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kit'], meta: { name: 'Kit' } }
  /**
   * Find zero or one Kit that matches the filter.
   * @param {KitFindUniqueArgs} args - Arguments to find a Kit
   * @example
   * // Get one Kit
   * const kit = await prisma.kit.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends KitFindUniqueArgs>(args: Prisma.SelectSubset<T, KitFindUniqueArgs<ExtArgs>>): Prisma.Prisma__KitClient<runtime.Types.Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Kit that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {KitFindUniqueOrThrowArgs} args - Arguments to find a Kit
   * @example
   * // Get one Kit
   * const kit = await prisma.kit.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends KitFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, KitFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__KitClient<runtime.Types.Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Kit that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KitFindFirstArgs} args - Arguments to find a Kit
   * @example
   * // Get one Kit
   * const kit = await prisma.kit.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends KitFindFirstArgs>(args?: Prisma.SelectSubset<T, KitFindFirstArgs<ExtArgs>>): Prisma.Prisma__KitClient<runtime.Types.Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Kit that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KitFindFirstOrThrowArgs} args - Arguments to find a Kit
   * @example
   * // Get one Kit
   * const kit = await prisma.kit.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends KitFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, KitFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__KitClient<runtime.Types.Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Kits that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KitFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Kits
   * const kits = await prisma.kit.findMany()
   * 
   * // Get first 10 Kits
   * const kits = await prisma.kit.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const kitWithIdOnly = await prisma.kit.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends KitFindManyArgs>(args?: Prisma.SelectSubset<T, KitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Kit.
   * @param {KitCreateArgs} args - Arguments to create a Kit.
   * @example
   * // Create one Kit
   * const Kit = await prisma.kit.create({
   *   data: {
   *     // ... data to create a Kit
   *   }
   * })
   * 
   */
  create<T extends KitCreateArgs>(args: Prisma.SelectSubset<T, KitCreateArgs<ExtArgs>>): Prisma.Prisma__KitClient<runtime.Types.Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Kits.
   * @param {KitCreateManyArgs} args - Arguments to create many Kits.
   * @example
   * // Create many Kits
   * const kit = await prisma.kit.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends KitCreateManyArgs>(args?: Prisma.SelectSubset<T, KitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Kits and returns the data saved in the database.
   * @param {KitCreateManyAndReturnArgs} args - Arguments to create many Kits.
   * @example
   * // Create many Kits
   * const kit = await prisma.kit.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Kits and only return the `id`
   * const kitWithIdOnly = await prisma.kit.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends KitCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, KitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Kit.
   * @param {KitDeleteArgs} args - Arguments to delete one Kit.
   * @example
   * // Delete one Kit
   * const Kit = await prisma.kit.delete({
   *   where: {
   *     // ... filter to delete one Kit
   *   }
   * })
   * 
   */
  delete<T extends KitDeleteArgs>(args: Prisma.SelectSubset<T, KitDeleteArgs<ExtArgs>>): Prisma.Prisma__KitClient<runtime.Types.Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Kit.
   * @param {KitUpdateArgs} args - Arguments to update one Kit.
   * @example
   * // Update one Kit
   * const kit = await prisma.kit.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends KitUpdateArgs>(args: Prisma.SelectSubset<T, KitUpdateArgs<ExtArgs>>): Prisma.Prisma__KitClient<runtime.Types.Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Kits.
   * @param {KitDeleteManyArgs} args - Arguments to filter Kits to delete.
   * @example
   * // Delete a few Kits
   * const { count } = await prisma.kit.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends KitDeleteManyArgs>(args?: Prisma.SelectSubset<T, KitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Kits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KitUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Kits
   * const kit = await prisma.kit.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends KitUpdateManyArgs>(args: Prisma.SelectSubset<T, KitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Kits and returns the data updated in the database.
   * @param {KitUpdateManyAndReturnArgs} args - Arguments to update many Kits.
   * @example
   * // Update many Kits
   * const kit = await prisma.kit.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Kits and only return the `id`
   * const kitWithIdOnly = await prisma.kit.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends KitUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, KitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Kit.
   * @param {KitUpsertArgs} args - Arguments to update or create a Kit.
   * @example
   * // Update or create a Kit
   * const kit = await prisma.kit.upsert({
   *   create: {
   *     // ... data to create a Kit
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Kit we want to update
   *   }
   * })
   */
  upsert<T extends KitUpsertArgs>(args: Prisma.SelectSubset<T, KitUpsertArgs<ExtArgs>>): Prisma.Prisma__KitClient<runtime.Types.Result.GetResult<Prisma.$KitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Kits.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KitCountArgs} args - Arguments to filter Kits to count.
   * @example
   * // Count the number of Kits
   * const count = await prisma.kit.count({
   *   where: {
   *     // ... the filter for the Kits we want to count
   *   }
   * })
  **/
  count<T extends KitCountArgs>(
    args?: Prisma.Subset<T, KitCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], KitCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Kit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends KitAggregateArgs>(args: Prisma.Subset<T, KitAggregateArgs>): Prisma.PrismaPromise<GetKitAggregateType<T>>

  /**
   * Group by Kit.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {KitGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends KitGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: KitGroupByArgs['orderBy'] }
      : { orderBy?: KitGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, KitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Kit model
 */
readonly fields: KitFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Kit.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__KitClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  vendor<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  products<T extends Prisma.Kit$productsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Kit$productsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$KitProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  orderItems<T extends Prisma.Kit$orderItemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Kit$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Kit model
 */
export interface KitFieldRefs {
  readonly id: Prisma.FieldRef<"Kit", 'String'>
  readonly name: Prisma.FieldRef<"Kit", 'String'>
  readonly description: Prisma.FieldRef<"Kit", 'String'>
  readonly price: Prisma.FieldRef<"Kit", 'Float'>
  readonly discount: Prisma.FieldRef<"Kit", 'Float'>
  readonly images: Prisma.FieldRef<"Kit", 'String[]'>
  readonly vendorId: Prisma.FieldRef<"Kit", 'String'>
  readonly createdAt: Prisma.FieldRef<"Kit", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Kit", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Kit findUnique
 */
export type KitFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kit
   */
  select?: Prisma.KitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kit
   */
  omit?: Prisma.KitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KitInclude<ExtArgs> | null
  /**
   * Filter, which Kit to fetch.
   */
  where: Prisma.KitWhereUniqueInput
}

/**
 * Kit findUniqueOrThrow
 */
export type KitFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kit
   */
  select?: Prisma.KitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kit
   */
  omit?: Prisma.KitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KitInclude<ExtArgs> | null
  /**
   * Filter, which Kit to fetch.
   */
  where: Prisma.KitWhereUniqueInput
}

/**
 * Kit findFirst
 */
export type KitFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kit
   */
  select?: Prisma.KitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kit
   */
  omit?: Prisma.KitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KitInclude<ExtArgs> | null
  /**
   * Filter, which Kit to fetch.
   */
  where?: Prisma.KitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Kits to fetch.
   */
  orderBy?: Prisma.KitOrderByWithRelationInput | Prisma.KitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Kits.
   */
  cursor?: Prisma.KitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Kits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Kits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Kits.
   */
  distinct?: Prisma.KitScalarFieldEnum | Prisma.KitScalarFieldEnum[]
}

/**
 * Kit findFirstOrThrow
 */
export type KitFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kit
   */
  select?: Prisma.KitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kit
   */
  omit?: Prisma.KitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KitInclude<ExtArgs> | null
  /**
   * Filter, which Kit to fetch.
   */
  where?: Prisma.KitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Kits to fetch.
   */
  orderBy?: Prisma.KitOrderByWithRelationInput | Prisma.KitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Kits.
   */
  cursor?: Prisma.KitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Kits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Kits.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Kits.
   */
  distinct?: Prisma.KitScalarFieldEnum | Prisma.KitScalarFieldEnum[]
}

/**
 * Kit findMany
 */
export type KitFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kit
   */
  select?: Prisma.KitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kit
   */
  omit?: Prisma.KitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KitInclude<ExtArgs> | null
  /**
   * Filter, which Kits to fetch.
   */
  where?: Prisma.KitWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Kits to fetch.
   */
  orderBy?: Prisma.KitOrderByWithRelationInput | Prisma.KitOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Kits.
   */
  cursor?: Prisma.KitWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Kits from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Kits.
   */
  skip?: number
  distinct?: Prisma.KitScalarFieldEnum | Prisma.KitScalarFieldEnum[]
}

/**
 * Kit create
 */
export type KitCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kit
   */
  select?: Prisma.KitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kit
   */
  omit?: Prisma.KitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KitInclude<ExtArgs> | null
  /**
   * The data needed to create a Kit.
   */
  data: Prisma.XOR<Prisma.KitCreateInput, Prisma.KitUncheckedCreateInput>
}

/**
 * Kit createMany
 */
export type KitCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Kits.
   */
  data: Prisma.KitCreateManyInput | Prisma.KitCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Kit createManyAndReturn
 */
export type KitCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kit
   */
  select?: Prisma.KitSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Kit
   */
  omit?: Prisma.KitOmit<ExtArgs> | null
  /**
   * The data used to create many Kits.
   */
  data: Prisma.KitCreateManyInput | Prisma.KitCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KitIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Kit update
 */
export type KitUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kit
   */
  select?: Prisma.KitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kit
   */
  omit?: Prisma.KitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KitInclude<ExtArgs> | null
  /**
   * The data needed to update a Kit.
   */
  data: Prisma.XOR<Prisma.KitUpdateInput, Prisma.KitUncheckedUpdateInput>
  /**
   * Choose, which Kit to update.
   */
  where: Prisma.KitWhereUniqueInput
}

/**
 * Kit updateMany
 */
export type KitUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Kits.
   */
  data: Prisma.XOR<Prisma.KitUpdateManyMutationInput, Prisma.KitUncheckedUpdateManyInput>
  /**
   * Filter which Kits to update
   */
  where?: Prisma.KitWhereInput
  /**
   * Limit how many Kits to update.
   */
  limit?: number
}

/**
 * Kit updateManyAndReturn
 */
export type KitUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kit
   */
  select?: Prisma.KitSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Kit
   */
  omit?: Prisma.KitOmit<ExtArgs> | null
  /**
   * The data used to update Kits.
   */
  data: Prisma.XOR<Prisma.KitUpdateManyMutationInput, Prisma.KitUncheckedUpdateManyInput>
  /**
   * Filter which Kits to update
   */
  where?: Prisma.KitWhereInput
  /**
   * Limit how many Kits to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KitIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Kit upsert
 */
export type KitUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kit
   */
  select?: Prisma.KitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kit
   */
  omit?: Prisma.KitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KitInclude<ExtArgs> | null
  /**
   * The filter to search for the Kit to update in case it exists.
   */
  where: Prisma.KitWhereUniqueInput
  /**
   * In case the Kit found by the `where` argument doesn't exist, create a new Kit with this data.
   */
  create: Prisma.XOR<Prisma.KitCreateInput, Prisma.KitUncheckedCreateInput>
  /**
   * In case the Kit was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.KitUpdateInput, Prisma.KitUncheckedUpdateInput>
}

/**
 * Kit delete
 */
export type KitDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kit
   */
  select?: Prisma.KitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kit
   */
  omit?: Prisma.KitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KitInclude<ExtArgs> | null
  /**
   * Filter which Kit to delete.
   */
  where: Prisma.KitWhereUniqueInput
}

/**
 * Kit deleteMany
 */
export type KitDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Kits to delete
   */
  where?: Prisma.KitWhereInput
  /**
   * Limit how many Kits to delete.
   */
  limit?: number
}

/**
 * Kit.products
 */
export type Kit$productsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the KitProduct
   */
  select?: Prisma.KitProductSelect<ExtArgs> | null
  /**
   * Omit specific fields from the KitProduct
   */
  omit?: Prisma.KitProductOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KitProductInclude<ExtArgs> | null
  where?: Prisma.KitProductWhereInput
  orderBy?: Prisma.KitProductOrderByWithRelationInput | Prisma.KitProductOrderByWithRelationInput[]
  cursor?: Prisma.KitProductWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.KitProductScalarFieldEnum | Prisma.KitProductScalarFieldEnum[]
}

/**
 * Kit.orderItems
 */
export type Kit$orderItemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderItem
   */
  select?: Prisma.OrderItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderItem
   */
  omit?: Prisma.OrderItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderItemInclude<ExtArgs> | null
  where?: Prisma.OrderItemWhereInput
  orderBy?: Prisma.OrderItemOrderByWithRelationInput | Prisma.OrderItemOrderByWithRelationInput[]
  cursor?: Prisma.OrderItemWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.OrderItemScalarFieldEnum | Prisma.OrderItemScalarFieldEnum[]
}

/**
 * Kit without action
 */
export type KitDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Kit
   */
  select?: Prisma.KitSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Kit
   */
  omit?: Prisma.KitOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.KitInclude<ExtArgs> | null
}
