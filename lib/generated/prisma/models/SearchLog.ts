
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `SearchLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model SearchLog
 * Modelo de busquedas populares
 */
export type SearchLogModel = runtime.Types.Result.DefaultSelection<Prisma.$SearchLogPayload>

export type AggregateSearchLog = {
  _count: SearchLogCountAggregateOutputType | null
  _avg: SearchLogAvgAggregateOutputType | null
  _sum: SearchLogSumAggregateOutputType | null
  _min: SearchLogMinAggregateOutputType | null
  _max: SearchLogMaxAggregateOutputType | null
}

export type SearchLogAvgAggregateOutputType = {
  clicks: number | null
}

export type SearchLogSumAggregateOutputType = {
  clicks: number | null
}

export type SearchLogMinAggregateOutputType = {
  id: string | null
  query: string | null
  clicks: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SearchLogMaxAggregateOutputType = {
  id: string | null
  query: string | null
  clicks: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SearchLogCountAggregateOutputType = {
  id: number
  query: number
  clicks: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type SearchLogAvgAggregateInputType = {
  clicks?: true
}

export type SearchLogSumAggregateInputType = {
  clicks?: true
}

export type SearchLogMinAggregateInputType = {
  id?: true
  query?: true
  clicks?: true
  createdAt?: true
  updatedAt?: true
}

export type SearchLogMaxAggregateInputType = {
  id?: true
  query?: true
  clicks?: true
  createdAt?: true
  updatedAt?: true
}

export type SearchLogCountAggregateInputType = {
  id?: true
  query?: true
  clicks?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type SearchLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SearchLog to aggregate.
   */
  where?: Prisma.SearchLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SearchLogs to fetch.
   */
  orderBy?: Prisma.SearchLogOrderByWithRelationInput | Prisma.SearchLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SearchLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SearchLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SearchLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned SearchLogs
  **/
  _count?: true | SearchLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SearchLogAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SearchLogSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SearchLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SearchLogMaxAggregateInputType
}

export type GetSearchLogAggregateType<T extends SearchLogAggregateArgs> = {
      [P in keyof T & keyof AggregateSearchLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSearchLog[P]>
    : Prisma.GetScalarType<T[P], AggregateSearchLog[P]>
}




export type SearchLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SearchLogWhereInput
  orderBy?: Prisma.SearchLogOrderByWithAggregationInput | Prisma.SearchLogOrderByWithAggregationInput[]
  by: Prisma.SearchLogScalarFieldEnum[] | Prisma.SearchLogScalarFieldEnum
  having?: Prisma.SearchLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SearchLogCountAggregateInputType | true
  _avg?: SearchLogAvgAggregateInputType
  _sum?: SearchLogSumAggregateInputType
  _min?: SearchLogMinAggregateInputType
  _max?: SearchLogMaxAggregateInputType
}

export type SearchLogGroupByOutputType = {
  id: string
  query: string
  clicks: number
  createdAt: Date
  updatedAt: Date
  _count: SearchLogCountAggregateOutputType | null
  _avg: SearchLogAvgAggregateOutputType | null
  _sum: SearchLogSumAggregateOutputType | null
  _min: SearchLogMinAggregateOutputType | null
  _max: SearchLogMaxAggregateOutputType | null
}

type GetSearchLogGroupByPayload<T extends SearchLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SearchLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SearchLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SearchLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SearchLogGroupByOutputType[P]>
      }
    >
  >



export type SearchLogWhereInput = {
  AND?: Prisma.SearchLogWhereInput | Prisma.SearchLogWhereInput[]
  OR?: Prisma.SearchLogWhereInput[]
  NOT?: Prisma.SearchLogWhereInput | Prisma.SearchLogWhereInput[]
  id?: Prisma.StringFilter<"SearchLog"> | string
  query?: Prisma.StringFilter<"SearchLog"> | string
  clicks?: Prisma.IntFilter<"SearchLog"> | number
  createdAt?: Prisma.DateTimeFilter<"SearchLog"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SearchLog"> | Date | string
}

export type SearchLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  query?: Prisma.SortOrder
  clicks?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SearchLogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  query?: string
  AND?: Prisma.SearchLogWhereInput | Prisma.SearchLogWhereInput[]
  OR?: Prisma.SearchLogWhereInput[]
  NOT?: Prisma.SearchLogWhereInput | Prisma.SearchLogWhereInput[]
  clicks?: Prisma.IntFilter<"SearchLog"> | number
  createdAt?: Prisma.DateTimeFilter<"SearchLog"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"SearchLog"> | Date | string
}, "id" | "query">

export type SearchLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  query?: Prisma.SortOrder
  clicks?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.SearchLogCountOrderByAggregateInput
  _avg?: Prisma.SearchLogAvgOrderByAggregateInput
  _max?: Prisma.SearchLogMaxOrderByAggregateInput
  _min?: Prisma.SearchLogMinOrderByAggregateInput
  _sum?: Prisma.SearchLogSumOrderByAggregateInput
}

export type SearchLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.SearchLogScalarWhereWithAggregatesInput | Prisma.SearchLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.SearchLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SearchLogScalarWhereWithAggregatesInput | Prisma.SearchLogScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"SearchLog"> | string
  query?: Prisma.StringWithAggregatesFilter<"SearchLog"> | string
  clicks?: Prisma.IntWithAggregatesFilter<"SearchLog"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"SearchLog"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"SearchLog"> | Date | string
}

export type SearchLogCreateInput = {
  id?: string
  query: string
  clicks?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SearchLogUncheckedCreateInput = {
  id?: string
  query: string
  clicks?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SearchLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  query?: Prisma.StringFieldUpdateOperationsInput | string
  clicks?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SearchLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  query?: Prisma.StringFieldUpdateOperationsInput | string
  clicks?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SearchLogCreateManyInput = {
  id?: string
  query: string
  clicks?: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SearchLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  query?: Prisma.StringFieldUpdateOperationsInput | string
  clicks?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SearchLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  query?: Prisma.StringFieldUpdateOperationsInput | string
  clicks?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SearchLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  query?: Prisma.SortOrder
  clicks?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SearchLogAvgOrderByAggregateInput = {
  clicks?: Prisma.SortOrder
}

export type SearchLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  query?: Prisma.SortOrder
  clicks?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SearchLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  query?: Prisma.SortOrder
  clicks?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SearchLogSumOrderByAggregateInput = {
  clicks?: Prisma.SortOrder
}



export type SearchLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  query?: boolean
  clicks?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["searchLog"]>

export type SearchLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  query?: boolean
  clicks?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["searchLog"]>

export type SearchLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  query?: boolean
  clicks?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["searchLog"]>

export type SearchLogSelectScalar = {
  id?: boolean
  query?: boolean
  clicks?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SearchLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "query" | "clicks" | "createdAt" | "updatedAt", ExtArgs["result"]["searchLog"]>

export type $SearchLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "SearchLog"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    query: string
    clicks: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["searchLog"]>
  composites: {}
}

export type SearchLogGetPayload<S extends boolean | null | undefined | SearchLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SearchLogPayload, S>

export type SearchLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SearchLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SearchLogCountAggregateInputType | true
  }

export interface SearchLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SearchLog'], meta: { name: 'SearchLog' } }
  /**
   * Find zero or one SearchLog that matches the filter.
   * @param {SearchLogFindUniqueArgs} args - Arguments to find a SearchLog
   * @example
   * // Get one SearchLog
   * const searchLog = await prisma.searchLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SearchLogFindUniqueArgs>(args: Prisma.SelectSubset<T, SearchLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SearchLogClient<runtime.Types.Result.GetResult<Prisma.$SearchLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one SearchLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SearchLogFindUniqueOrThrowArgs} args - Arguments to find a SearchLog
   * @example
   * // Get one SearchLog
   * const searchLog = await prisma.searchLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SearchLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SearchLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SearchLogClient<runtime.Types.Result.GetResult<Prisma.$SearchLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SearchLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchLogFindFirstArgs} args - Arguments to find a SearchLog
   * @example
   * // Get one SearchLog
   * const searchLog = await prisma.searchLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SearchLogFindFirstArgs>(args?: Prisma.SelectSubset<T, SearchLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__SearchLogClient<runtime.Types.Result.GetResult<Prisma.$SearchLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first SearchLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchLogFindFirstOrThrowArgs} args - Arguments to find a SearchLog
   * @example
   * // Get one SearchLog
   * const searchLog = await prisma.searchLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SearchLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SearchLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SearchLogClient<runtime.Types.Result.GetResult<Prisma.$SearchLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more SearchLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all SearchLogs
   * const searchLogs = await prisma.searchLog.findMany()
   * 
   * // Get first 10 SearchLogs
   * const searchLogs = await prisma.searchLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const searchLogWithIdOnly = await prisma.searchLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SearchLogFindManyArgs>(args?: Prisma.SelectSubset<T, SearchLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SearchLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a SearchLog.
   * @param {SearchLogCreateArgs} args - Arguments to create a SearchLog.
   * @example
   * // Create one SearchLog
   * const SearchLog = await prisma.searchLog.create({
   *   data: {
   *     // ... data to create a SearchLog
   *   }
   * })
   * 
   */
  create<T extends SearchLogCreateArgs>(args: Prisma.SelectSubset<T, SearchLogCreateArgs<ExtArgs>>): Prisma.Prisma__SearchLogClient<runtime.Types.Result.GetResult<Prisma.$SearchLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many SearchLogs.
   * @param {SearchLogCreateManyArgs} args - Arguments to create many SearchLogs.
   * @example
   * // Create many SearchLogs
   * const searchLog = await prisma.searchLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SearchLogCreateManyArgs>(args?: Prisma.SelectSubset<T, SearchLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many SearchLogs and returns the data saved in the database.
   * @param {SearchLogCreateManyAndReturnArgs} args - Arguments to create many SearchLogs.
   * @example
   * // Create many SearchLogs
   * const searchLog = await prisma.searchLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many SearchLogs and only return the `id`
   * const searchLogWithIdOnly = await prisma.searchLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SearchLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SearchLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SearchLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a SearchLog.
   * @param {SearchLogDeleteArgs} args - Arguments to delete one SearchLog.
   * @example
   * // Delete one SearchLog
   * const SearchLog = await prisma.searchLog.delete({
   *   where: {
   *     // ... filter to delete one SearchLog
   *   }
   * })
   * 
   */
  delete<T extends SearchLogDeleteArgs>(args: Prisma.SelectSubset<T, SearchLogDeleteArgs<ExtArgs>>): Prisma.Prisma__SearchLogClient<runtime.Types.Result.GetResult<Prisma.$SearchLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one SearchLog.
   * @param {SearchLogUpdateArgs} args - Arguments to update one SearchLog.
   * @example
   * // Update one SearchLog
   * const searchLog = await prisma.searchLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SearchLogUpdateArgs>(args: Prisma.SelectSubset<T, SearchLogUpdateArgs<ExtArgs>>): Prisma.Prisma__SearchLogClient<runtime.Types.Result.GetResult<Prisma.$SearchLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more SearchLogs.
   * @param {SearchLogDeleteManyArgs} args - Arguments to filter SearchLogs to delete.
   * @example
   * // Delete a few SearchLogs
   * const { count } = await prisma.searchLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SearchLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, SearchLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SearchLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many SearchLogs
   * const searchLog = await prisma.searchLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SearchLogUpdateManyArgs>(args: Prisma.SelectSubset<T, SearchLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more SearchLogs and returns the data updated in the database.
   * @param {SearchLogUpdateManyAndReturnArgs} args - Arguments to update many SearchLogs.
   * @example
   * // Update many SearchLogs
   * const searchLog = await prisma.searchLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more SearchLogs and only return the `id`
   * const searchLogWithIdOnly = await prisma.searchLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SearchLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SearchLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SearchLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one SearchLog.
   * @param {SearchLogUpsertArgs} args - Arguments to update or create a SearchLog.
   * @example
   * // Update or create a SearchLog
   * const searchLog = await prisma.searchLog.upsert({
   *   create: {
   *     // ... data to create a SearchLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the SearchLog we want to update
   *   }
   * })
   */
  upsert<T extends SearchLogUpsertArgs>(args: Prisma.SelectSubset<T, SearchLogUpsertArgs<ExtArgs>>): Prisma.Prisma__SearchLogClient<runtime.Types.Result.GetResult<Prisma.$SearchLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of SearchLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchLogCountArgs} args - Arguments to filter SearchLogs to count.
   * @example
   * // Count the number of SearchLogs
   * const count = await prisma.searchLog.count({
   *   where: {
   *     // ... the filter for the SearchLogs we want to count
   *   }
   * })
  **/
  count<T extends SearchLogCountArgs>(
    args?: Prisma.Subset<T, SearchLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SearchLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a SearchLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SearchLogAggregateArgs>(args: Prisma.Subset<T, SearchLogAggregateArgs>): Prisma.PrismaPromise<GetSearchLogAggregateType<T>>

  /**
   * Group by SearchLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SearchLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SearchLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SearchLogGroupByArgs['orderBy'] }
      : { orderBy?: SearchLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SearchLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSearchLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the SearchLog model
 */
readonly fields: SearchLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for SearchLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SearchLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the SearchLog model
 */
export interface SearchLogFieldRefs {
  readonly id: Prisma.FieldRef<"SearchLog", 'String'>
  readonly query: Prisma.FieldRef<"SearchLog", 'String'>
  readonly clicks: Prisma.FieldRef<"SearchLog", 'Int'>
  readonly createdAt: Prisma.FieldRef<"SearchLog", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"SearchLog", 'DateTime'>
}
    

// Custom InputTypes
/**
 * SearchLog findUnique
 */
export type SearchLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchLog
   */
  select?: Prisma.SearchLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchLog
   */
  omit?: Prisma.SearchLogOmit<ExtArgs> | null
  /**
   * Filter, which SearchLog to fetch.
   */
  where: Prisma.SearchLogWhereUniqueInput
}

/**
 * SearchLog findUniqueOrThrow
 */
export type SearchLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchLog
   */
  select?: Prisma.SearchLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchLog
   */
  omit?: Prisma.SearchLogOmit<ExtArgs> | null
  /**
   * Filter, which SearchLog to fetch.
   */
  where: Prisma.SearchLogWhereUniqueInput
}

/**
 * SearchLog findFirst
 */
export type SearchLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchLog
   */
  select?: Prisma.SearchLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchLog
   */
  omit?: Prisma.SearchLogOmit<ExtArgs> | null
  /**
   * Filter, which SearchLog to fetch.
   */
  where?: Prisma.SearchLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SearchLogs to fetch.
   */
  orderBy?: Prisma.SearchLogOrderByWithRelationInput | Prisma.SearchLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SearchLogs.
   */
  cursor?: Prisma.SearchLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SearchLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SearchLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SearchLogs.
   */
  distinct?: Prisma.SearchLogScalarFieldEnum | Prisma.SearchLogScalarFieldEnum[]
}

/**
 * SearchLog findFirstOrThrow
 */
export type SearchLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchLog
   */
  select?: Prisma.SearchLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchLog
   */
  omit?: Prisma.SearchLogOmit<ExtArgs> | null
  /**
   * Filter, which SearchLog to fetch.
   */
  where?: Prisma.SearchLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SearchLogs to fetch.
   */
  orderBy?: Prisma.SearchLogOrderByWithRelationInput | Prisma.SearchLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for SearchLogs.
   */
  cursor?: Prisma.SearchLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SearchLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SearchLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of SearchLogs.
   */
  distinct?: Prisma.SearchLogScalarFieldEnum | Prisma.SearchLogScalarFieldEnum[]
}

/**
 * SearchLog findMany
 */
export type SearchLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchLog
   */
  select?: Prisma.SearchLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchLog
   */
  omit?: Prisma.SearchLogOmit<ExtArgs> | null
  /**
   * Filter, which SearchLogs to fetch.
   */
  where?: Prisma.SearchLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of SearchLogs to fetch.
   */
  orderBy?: Prisma.SearchLogOrderByWithRelationInput | Prisma.SearchLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing SearchLogs.
   */
  cursor?: Prisma.SearchLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` SearchLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` SearchLogs.
   */
  skip?: number
  distinct?: Prisma.SearchLogScalarFieldEnum | Prisma.SearchLogScalarFieldEnum[]
}

/**
 * SearchLog create
 */
export type SearchLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchLog
   */
  select?: Prisma.SearchLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchLog
   */
  omit?: Prisma.SearchLogOmit<ExtArgs> | null
  /**
   * The data needed to create a SearchLog.
   */
  data: Prisma.XOR<Prisma.SearchLogCreateInput, Prisma.SearchLogUncheckedCreateInput>
}

/**
 * SearchLog createMany
 */
export type SearchLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many SearchLogs.
   */
  data: Prisma.SearchLogCreateManyInput | Prisma.SearchLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SearchLog createManyAndReturn
 */
export type SearchLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchLog
   */
  select?: Prisma.SearchLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SearchLog
   */
  omit?: Prisma.SearchLogOmit<ExtArgs> | null
  /**
   * The data used to create many SearchLogs.
   */
  data: Prisma.SearchLogCreateManyInput | Prisma.SearchLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * SearchLog update
 */
export type SearchLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchLog
   */
  select?: Prisma.SearchLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchLog
   */
  omit?: Prisma.SearchLogOmit<ExtArgs> | null
  /**
   * The data needed to update a SearchLog.
   */
  data: Prisma.XOR<Prisma.SearchLogUpdateInput, Prisma.SearchLogUncheckedUpdateInput>
  /**
   * Choose, which SearchLog to update.
   */
  where: Prisma.SearchLogWhereUniqueInput
}

/**
 * SearchLog updateMany
 */
export type SearchLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update SearchLogs.
   */
  data: Prisma.XOR<Prisma.SearchLogUpdateManyMutationInput, Prisma.SearchLogUncheckedUpdateManyInput>
  /**
   * Filter which SearchLogs to update
   */
  where?: Prisma.SearchLogWhereInput
  /**
   * Limit how many SearchLogs to update.
   */
  limit?: number
}

/**
 * SearchLog updateManyAndReturn
 */
export type SearchLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchLog
   */
  select?: Prisma.SearchLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the SearchLog
   */
  omit?: Prisma.SearchLogOmit<ExtArgs> | null
  /**
   * The data used to update SearchLogs.
   */
  data: Prisma.XOR<Prisma.SearchLogUpdateManyMutationInput, Prisma.SearchLogUncheckedUpdateManyInput>
  /**
   * Filter which SearchLogs to update
   */
  where?: Prisma.SearchLogWhereInput
  /**
   * Limit how many SearchLogs to update.
   */
  limit?: number
}

/**
 * SearchLog upsert
 */
export type SearchLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchLog
   */
  select?: Prisma.SearchLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchLog
   */
  omit?: Prisma.SearchLogOmit<ExtArgs> | null
  /**
   * The filter to search for the SearchLog to update in case it exists.
   */
  where: Prisma.SearchLogWhereUniqueInput
  /**
   * In case the SearchLog found by the `where` argument doesn't exist, create a new SearchLog with this data.
   */
  create: Prisma.XOR<Prisma.SearchLogCreateInput, Prisma.SearchLogUncheckedCreateInput>
  /**
   * In case the SearchLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SearchLogUpdateInput, Prisma.SearchLogUncheckedUpdateInput>
}

/**
 * SearchLog delete
 */
export type SearchLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchLog
   */
  select?: Prisma.SearchLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchLog
   */
  omit?: Prisma.SearchLogOmit<ExtArgs> | null
  /**
   * Filter which SearchLog to delete.
   */
  where: Prisma.SearchLogWhereUniqueInput
}

/**
 * SearchLog deleteMany
 */
export type SearchLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which SearchLogs to delete
   */
  where?: Prisma.SearchLogWhereInput
  /**
   * Limit how many SearchLogs to delete.
   */
  limit?: number
}

/**
 * SearchLog without action
 */
export type SearchLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SearchLog
   */
  select?: Prisma.SearchLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the SearchLog
   */
  omit?: Prisma.SearchLogOmit<ExtArgs> | null
}
