
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserProductView` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserProductView
 * 
 */
export type UserProductViewModel = runtime.Types.Result.DefaultSelection<Prisma.$UserProductViewPayload>

export type AggregateUserProductView = {
  _count: UserProductViewCountAggregateOutputType | null
  _min: UserProductViewMinAggregateOutputType | null
  _max: UserProductViewMaxAggregateOutputType | null
}

export type UserProductViewMinAggregateOutputType = {
  id: string | null
  userId: string | null
  productId: string | null
  viewedAt: Date | null
}

export type UserProductViewMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  productId: string | null
  viewedAt: Date | null
}

export type UserProductViewCountAggregateOutputType = {
  id: number
  userId: number
  productId: number
  viewedAt: number
  _all: number
}


export type UserProductViewMinAggregateInputType = {
  id?: true
  userId?: true
  productId?: true
  viewedAt?: true
}

export type UserProductViewMaxAggregateInputType = {
  id?: true
  userId?: true
  productId?: true
  viewedAt?: true
}

export type UserProductViewCountAggregateInputType = {
  id?: true
  userId?: true
  productId?: true
  viewedAt?: true
  _all?: true
}

export type UserProductViewAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserProductView to aggregate.
   */
  where?: Prisma.UserProductViewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserProductViews to fetch.
   */
  orderBy?: Prisma.UserProductViewOrderByWithRelationInput | Prisma.UserProductViewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserProductViewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserProductViews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserProductViews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserProductViews
  **/
  _count?: true | UserProductViewCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserProductViewMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserProductViewMaxAggregateInputType
}

export type GetUserProductViewAggregateType<T extends UserProductViewAggregateArgs> = {
      [P in keyof T & keyof AggregateUserProductView]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserProductView[P]>
    : Prisma.GetScalarType<T[P], AggregateUserProductView[P]>
}




export type UserProductViewGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserProductViewWhereInput
  orderBy?: Prisma.UserProductViewOrderByWithAggregationInput | Prisma.UserProductViewOrderByWithAggregationInput[]
  by: Prisma.UserProductViewScalarFieldEnum[] | Prisma.UserProductViewScalarFieldEnum
  having?: Prisma.UserProductViewScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserProductViewCountAggregateInputType | true
  _min?: UserProductViewMinAggregateInputType
  _max?: UserProductViewMaxAggregateInputType
}

export type UserProductViewGroupByOutputType = {
  id: string
  userId: string
  productId: string
  viewedAt: Date
  _count: UserProductViewCountAggregateOutputType | null
  _min: UserProductViewMinAggregateOutputType | null
  _max: UserProductViewMaxAggregateOutputType | null
}

type GetUserProductViewGroupByPayload<T extends UserProductViewGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserProductViewGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserProductViewGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserProductViewGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserProductViewGroupByOutputType[P]>
      }
    >
  >



export type UserProductViewWhereInput = {
  AND?: Prisma.UserProductViewWhereInput | Prisma.UserProductViewWhereInput[]
  OR?: Prisma.UserProductViewWhereInput[]
  NOT?: Prisma.UserProductViewWhereInput | Prisma.UserProductViewWhereInput[]
  id?: Prisma.StringFilter<"UserProductView"> | string
  userId?: Prisma.StringFilter<"UserProductView"> | string
  productId?: Prisma.StringFilter<"UserProductView"> | string
  viewedAt?: Prisma.DateTimeFilter<"UserProductView"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type UserProductViewOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  viewedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  product?: Prisma.ProductOrderByWithRelationInput
}

export type UserProductViewWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_productId?: Prisma.UserProductViewUserIdProductIdCompoundUniqueInput
  AND?: Prisma.UserProductViewWhereInput | Prisma.UserProductViewWhereInput[]
  OR?: Prisma.UserProductViewWhereInput[]
  NOT?: Prisma.UserProductViewWhereInput | Prisma.UserProductViewWhereInput[]
  userId?: Prisma.StringFilter<"UserProductView"> | string
  productId?: Prisma.StringFilter<"UserProductView"> | string
  viewedAt?: Prisma.DateTimeFilter<"UserProductView"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id" | "userId_productId">

export type UserProductViewOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  viewedAt?: Prisma.SortOrder
  _count?: Prisma.UserProductViewCountOrderByAggregateInput
  _max?: Prisma.UserProductViewMaxOrderByAggregateInput
  _min?: Prisma.UserProductViewMinOrderByAggregateInput
}

export type UserProductViewScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserProductViewScalarWhereWithAggregatesInput | Prisma.UserProductViewScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserProductViewScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserProductViewScalarWhereWithAggregatesInput | Prisma.UserProductViewScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserProductView"> | string
  userId?: Prisma.StringWithAggregatesFilter<"UserProductView"> | string
  productId?: Prisma.StringWithAggregatesFilter<"UserProductView"> | string
  viewedAt?: Prisma.DateTimeWithAggregatesFilter<"UserProductView"> | Date | string
}

export type UserProductViewCreateInput = {
  id?: string
  viewedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutViewedProductsInput
  product: Prisma.ProductCreateNestedOneWithoutUserViewsInput
}

export type UserProductViewUncheckedCreateInput = {
  id?: string
  userId: string
  productId: string
  viewedAt?: Date | string
}

export type UserProductViewUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  viewedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutViewedProductsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutUserViewsNestedInput
}

export type UserProductViewUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  viewedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserProductViewCreateManyInput = {
  id?: string
  userId: string
  productId: string
  viewedAt?: Date | string
}

export type UserProductViewUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  viewedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserProductViewUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  viewedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserProductViewListRelationFilter = {
  every?: Prisma.UserProductViewWhereInput
  some?: Prisma.UserProductViewWhereInput
  none?: Prisma.UserProductViewWhereInput
}

export type UserProductViewOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UserProductViewUserIdProductIdCompoundUniqueInput = {
  userId: string
  productId: string
}

export type UserProductViewCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  viewedAt?: Prisma.SortOrder
}

export type UserProductViewMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  viewedAt?: Prisma.SortOrder
}

export type UserProductViewMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  viewedAt?: Prisma.SortOrder
}

export type UserProductViewCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserProductViewCreateWithoutUserInput, Prisma.UserProductViewUncheckedCreateWithoutUserInput> | Prisma.UserProductViewCreateWithoutUserInput[] | Prisma.UserProductViewUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserProductViewCreateOrConnectWithoutUserInput | Prisma.UserProductViewCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserProductViewCreateManyUserInputEnvelope
  connect?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
}

export type UserProductViewUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserProductViewCreateWithoutUserInput, Prisma.UserProductViewUncheckedCreateWithoutUserInput> | Prisma.UserProductViewCreateWithoutUserInput[] | Prisma.UserProductViewUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserProductViewCreateOrConnectWithoutUserInput | Prisma.UserProductViewCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.UserProductViewCreateManyUserInputEnvelope
  connect?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
}

export type UserProductViewUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserProductViewCreateWithoutUserInput, Prisma.UserProductViewUncheckedCreateWithoutUserInput> | Prisma.UserProductViewCreateWithoutUserInput[] | Prisma.UserProductViewUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserProductViewCreateOrConnectWithoutUserInput | Prisma.UserProductViewCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserProductViewUpsertWithWhereUniqueWithoutUserInput | Prisma.UserProductViewUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserProductViewCreateManyUserInputEnvelope
  set?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  disconnect?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  delete?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  connect?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  update?: Prisma.UserProductViewUpdateWithWhereUniqueWithoutUserInput | Prisma.UserProductViewUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserProductViewUpdateManyWithWhereWithoutUserInput | Prisma.UserProductViewUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserProductViewScalarWhereInput | Prisma.UserProductViewScalarWhereInput[]
}

export type UserProductViewUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserProductViewCreateWithoutUserInput, Prisma.UserProductViewUncheckedCreateWithoutUserInput> | Prisma.UserProductViewCreateWithoutUserInput[] | Prisma.UserProductViewUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.UserProductViewCreateOrConnectWithoutUserInput | Prisma.UserProductViewCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.UserProductViewUpsertWithWhereUniqueWithoutUserInput | Prisma.UserProductViewUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.UserProductViewCreateManyUserInputEnvelope
  set?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  disconnect?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  delete?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  connect?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  update?: Prisma.UserProductViewUpdateWithWhereUniqueWithoutUserInput | Prisma.UserProductViewUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.UserProductViewUpdateManyWithWhereWithoutUserInput | Prisma.UserProductViewUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.UserProductViewScalarWhereInput | Prisma.UserProductViewScalarWhereInput[]
}

export type UserProductViewCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.UserProductViewCreateWithoutProductInput, Prisma.UserProductViewUncheckedCreateWithoutProductInput> | Prisma.UserProductViewCreateWithoutProductInput[] | Prisma.UserProductViewUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.UserProductViewCreateOrConnectWithoutProductInput | Prisma.UserProductViewCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.UserProductViewCreateManyProductInputEnvelope
  connect?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
}

export type UserProductViewUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.UserProductViewCreateWithoutProductInput, Prisma.UserProductViewUncheckedCreateWithoutProductInput> | Prisma.UserProductViewCreateWithoutProductInput[] | Prisma.UserProductViewUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.UserProductViewCreateOrConnectWithoutProductInput | Prisma.UserProductViewCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.UserProductViewCreateManyProductInputEnvelope
  connect?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
}

export type UserProductViewUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.UserProductViewCreateWithoutProductInput, Prisma.UserProductViewUncheckedCreateWithoutProductInput> | Prisma.UserProductViewCreateWithoutProductInput[] | Prisma.UserProductViewUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.UserProductViewCreateOrConnectWithoutProductInput | Prisma.UserProductViewCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.UserProductViewUpsertWithWhereUniqueWithoutProductInput | Prisma.UserProductViewUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.UserProductViewCreateManyProductInputEnvelope
  set?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  disconnect?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  delete?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  connect?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  update?: Prisma.UserProductViewUpdateWithWhereUniqueWithoutProductInput | Prisma.UserProductViewUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.UserProductViewUpdateManyWithWhereWithoutProductInput | Prisma.UserProductViewUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.UserProductViewScalarWhereInput | Prisma.UserProductViewScalarWhereInput[]
}

export type UserProductViewUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.UserProductViewCreateWithoutProductInput, Prisma.UserProductViewUncheckedCreateWithoutProductInput> | Prisma.UserProductViewCreateWithoutProductInput[] | Prisma.UserProductViewUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.UserProductViewCreateOrConnectWithoutProductInput | Prisma.UserProductViewCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.UserProductViewUpsertWithWhereUniqueWithoutProductInput | Prisma.UserProductViewUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.UserProductViewCreateManyProductInputEnvelope
  set?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  disconnect?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  delete?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  connect?: Prisma.UserProductViewWhereUniqueInput | Prisma.UserProductViewWhereUniqueInput[]
  update?: Prisma.UserProductViewUpdateWithWhereUniqueWithoutProductInput | Prisma.UserProductViewUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.UserProductViewUpdateManyWithWhereWithoutProductInput | Prisma.UserProductViewUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.UserProductViewScalarWhereInput | Prisma.UserProductViewScalarWhereInput[]
}

export type UserProductViewCreateWithoutUserInput = {
  id?: string
  viewedAt?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutUserViewsInput
}

export type UserProductViewUncheckedCreateWithoutUserInput = {
  id?: string
  productId: string
  viewedAt?: Date | string
}

export type UserProductViewCreateOrConnectWithoutUserInput = {
  where: Prisma.UserProductViewWhereUniqueInput
  create: Prisma.XOR<Prisma.UserProductViewCreateWithoutUserInput, Prisma.UserProductViewUncheckedCreateWithoutUserInput>
}

export type UserProductViewCreateManyUserInputEnvelope = {
  data: Prisma.UserProductViewCreateManyUserInput | Prisma.UserProductViewCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type UserProductViewUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserProductViewWhereUniqueInput
  update: Prisma.XOR<Prisma.UserProductViewUpdateWithoutUserInput, Prisma.UserProductViewUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserProductViewCreateWithoutUserInput, Prisma.UserProductViewUncheckedCreateWithoutUserInput>
}

export type UserProductViewUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.UserProductViewWhereUniqueInput
  data: Prisma.XOR<Prisma.UserProductViewUpdateWithoutUserInput, Prisma.UserProductViewUncheckedUpdateWithoutUserInput>
}

export type UserProductViewUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.UserProductViewScalarWhereInput
  data: Prisma.XOR<Prisma.UserProductViewUpdateManyMutationInput, Prisma.UserProductViewUncheckedUpdateManyWithoutUserInput>
}

export type UserProductViewScalarWhereInput = {
  AND?: Prisma.UserProductViewScalarWhereInput | Prisma.UserProductViewScalarWhereInput[]
  OR?: Prisma.UserProductViewScalarWhereInput[]
  NOT?: Prisma.UserProductViewScalarWhereInput | Prisma.UserProductViewScalarWhereInput[]
  id?: Prisma.StringFilter<"UserProductView"> | string
  userId?: Prisma.StringFilter<"UserProductView"> | string
  productId?: Prisma.StringFilter<"UserProductView"> | string
  viewedAt?: Prisma.DateTimeFilter<"UserProductView"> | Date | string
}

export type UserProductViewCreateWithoutProductInput = {
  id?: string
  viewedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutViewedProductsInput
}

export type UserProductViewUncheckedCreateWithoutProductInput = {
  id?: string
  userId: string
  viewedAt?: Date | string
}

export type UserProductViewCreateOrConnectWithoutProductInput = {
  where: Prisma.UserProductViewWhereUniqueInput
  create: Prisma.XOR<Prisma.UserProductViewCreateWithoutProductInput, Prisma.UserProductViewUncheckedCreateWithoutProductInput>
}

export type UserProductViewCreateManyProductInputEnvelope = {
  data: Prisma.UserProductViewCreateManyProductInput | Prisma.UserProductViewCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type UserProductViewUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.UserProductViewWhereUniqueInput
  update: Prisma.XOR<Prisma.UserProductViewUpdateWithoutProductInput, Prisma.UserProductViewUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.UserProductViewCreateWithoutProductInput, Prisma.UserProductViewUncheckedCreateWithoutProductInput>
}

export type UserProductViewUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.UserProductViewWhereUniqueInput
  data: Prisma.XOR<Prisma.UserProductViewUpdateWithoutProductInput, Prisma.UserProductViewUncheckedUpdateWithoutProductInput>
}

export type UserProductViewUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.UserProductViewScalarWhereInput
  data: Prisma.XOR<Prisma.UserProductViewUpdateManyMutationInput, Prisma.UserProductViewUncheckedUpdateManyWithoutProductInput>
}

export type UserProductViewCreateManyUserInput = {
  id?: string
  productId: string
  viewedAt?: Date | string
}

export type UserProductViewUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  viewedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutUserViewsNestedInput
}

export type UserProductViewUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  viewedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserProductViewUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  viewedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserProductViewCreateManyProductInput = {
  id?: string
  userId: string
  viewedAt?: Date | string
}

export type UserProductViewUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  viewedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutViewedProductsNestedInput
}

export type UserProductViewUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  viewedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserProductViewUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  viewedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type UserProductViewSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  productId?: boolean
  viewedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userProductView"]>

export type UserProductViewSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  productId?: boolean
  viewedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userProductView"]>

export type UserProductViewSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  productId?: boolean
  viewedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userProductView"]>

export type UserProductViewSelectScalar = {
  id?: boolean
  userId?: boolean
  productId?: boolean
  viewedAt?: boolean
}

export type UserProductViewOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "productId" | "viewedAt", ExtArgs["result"]["userProductView"]>
export type UserProductViewInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type UserProductViewIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type UserProductViewIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $UserProductViewPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserProductView"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    productId: string
    viewedAt: Date
  }, ExtArgs["result"]["userProductView"]>
  composites: {}
}

export type UserProductViewGetPayload<S extends boolean | null | undefined | UserProductViewDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserProductViewPayload, S>

export type UserProductViewCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserProductViewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserProductViewCountAggregateInputType | true
  }

export interface UserProductViewDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProductView'], meta: { name: 'UserProductView' } }
  /**
   * Find zero or one UserProductView that matches the filter.
   * @param {UserProductViewFindUniqueArgs} args - Arguments to find a UserProductView
   * @example
   * // Get one UserProductView
   * const userProductView = await prisma.userProductView.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserProductViewFindUniqueArgs>(args: Prisma.SelectSubset<T, UserProductViewFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserProductViewClient<runtime.Types.Result.GetResult<Prisma.$UserProductViewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserProductView that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserProductViewFindUniqueOrThrowArgs} args - Arguments to find a UserProductView
   * @example
   * // Get one UserProductView
   * const userProductView = await prisma.userProductView.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserProductViewFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserProductViewFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserProductViewClient<runtime.Types.Result.GetResult<Prisma.$UserProductViewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserProductView that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProductViewFindFirstArgs} args - Arguments to find a UserProductView
   * @example
   * // Get one UserProductView
   * const userProductView = await prisma.userProductView.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserProductViewFindFirstArgs>(args?: Prisma.SelectSubset<T, UserProductViewFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserProductViewClient<runtime.Types.Result.GetResult<Prisma.$UserProductViewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserProductView that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProductViewFindFirstOrThrowArgs} args - Arguments to find a UserProductView
   * @example
   * // Get one UserProductView
   * const userProductView = await prisma.userProductView.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserProductViewFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserProductViewFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserProductViewClient<runtime.Types.Result.GetResult<Prisma.$UserProductViewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserProductViews that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProductViewFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserProductViews
   * const userProductViews = await prisma.userProductView.findMany()
   * 
   * // Get first 10 UserProductViews
   * const userProductViews = await prisma.userProductView.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userProductViewWithIdOnly = await prisma.userProductView.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserProductViewFindManyArgs>(args?: Prisma.SelectSubset<T, UserProductViewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserProductViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserProductView.
   * @param {UserProductViewCreateArgs} args - Arguments to create a UserProductView.
   * @example
   * // Create one UserProductView
   * const UserProductView = await prisma.userProductView.create({
   *   data: {
   *     // ... data to create a UserProductView
   *   }
   * })
   * 
   */
  create<T extends UserProductViewCreateArgs>(args: Prisma.SelectSubset<T, UserProductViewCreateArgs<ExtArgs>>): Prisma.Prisma__UserProductViewClient<runtime.Types.Result.GetResult<Prisma.$UserProductViewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserProductViews.
   * @param {UserProductViewCreateManyArgs} args - Arguments to create many UserProductViews.
   * @example
   * // Create many UserProductViews
   * const userProductView = await prisma.userProductView.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserProductViewCreateManyArgs>(args?: Prisma.SelectSubset<T, UserProductViewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserProductViews and returns the data saved in the database.
   * @param {UserProductViewCreateManyAndReturnArgs} args - Arguments to create many UserProductViews.
   * @example
   * // Create many UserProductViews
   * const userProductView = await prisma.userProductView.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserProductViews and only return the `id`
   * const userProductViewWithIdOnly = await prisma.userProductView.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserProductViewCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserProductViewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserProductViewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserProductView.
   * @param {UserProductViewDeleteArgs} args - Arguments to delete one UserProductView.
   * @example
   * // Delete one UserProductView
   * const UserProductView = await prisma.userProductView.delete({
   *   where: {
   *     // ... filter to delete one UserProductView
   *   }
   * })
   * 
   */
  delete<T extends UserProductViewDeleteArgs>(args: Prisma.SelectSubset<T, UserProductViewDeleteArgs<ExtArgs>>): Prisma.Prisma__UserProductViewClient<runtime.Types.Result.GetResult<Prisma.$UserProductViewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserProductView.
   * @param {UserProductViewUpdateArgs} args - Arguments to update one UserProductView.
   * @example
   * // Update one UserProductView
   * const userProductView = await prisma.userProductView.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserProductViewUpdateArgs>(args: Prisma.SelectSubset<T, UserProductViewUpdateArgs<ExtArgs>>): Prisma.Prisma__UserProductViewClient<runtime.Types.Result.GetResult<Prisma.$UserProductViewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserProductViews.
   * @param {UserProductViewDeleteManyArgs} args - Arguments to filter UserProductViews to delete.
   * @example
   * // Delete a few UserProductViews
   * const { count } = await prisma.userProductView.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserProductViewDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserProductViewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserProductViews.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProductViewUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserProductViews
   * const userProductView = await prisma.userProductView.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserProductViewUpdateManyArgs>(args: Prisma.SelectSubset<T, UserProductViewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserProductViews and returns the data updated in the database.
   * @param {UserProductViewUpdateManyAndReturnArgs} args - Arguments to update many UserProductViews.
   * @example
   * // Update many UserProductViews
   * const userProductView = await prisma.userProductView.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserProductViews and only return the `id`
   * const userProductViewWithIdOnly = await prisma.userProductView.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserProductViewUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserProductViewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserProductViewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserProductView.
   * @param {UserProductViewUpsertArgs} args - Arguments to update or create a UserProductView.
   * @example
   * // Update or create a UserProductView
   * const userProductView = await prisma.userProductView.upsert({
   *   create: {
   *     // ... data to create a UserProductView
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserProductView we want to update
   *   }
   * })
   */
  upsert<T extends UserProductViewUpsertArgs>(args: Prisma.SelectSubset<T, UserProductViewUpsertArgs<ExtArgs>>): Prisma.Prisma__UserProductViewClient<runtime.Types.Result.GetResult<Prisma.$UserProductViewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserProductViews.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProductViewCountArgs} args - Arguments to filter UserProductViews to count.
   * @example
   * // Count the number of UserProductViews
   * const count = await prisma.userProductView.count({
   *   where: {
   *     // ... the filter for the UserProductViews we want to count
   *   }
   * })
  **/
  count<T extends UserProductViewCountArgs>(
    args?: Prisma.Subset<T, UserProductViewCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserProductViewCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserProductView.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProductViewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserProductViewAggregateArgs>(args: Prisma.Subset<T, UserProductViewAggregateArgs>): Prisma.PrismaPromise<GetUserProductViewAggregateType<T>>

  /**
   * Group by UserProductView.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserProductViewGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserProductViewGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserProductViewGroupByArgs['orderBy'] }
      : { orderBy?: UserProductViewGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserProductViewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProductViewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserProductView model
 */
readonly fields: UserProductViewFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserProductView.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserProductViewClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserProductView model
 */
export interface UserProductViewFieldRefs {
  readonly id: Prisma.FieldRef<"UserProductView", 'String'>
  readonly userId: Prisma.FieldRef<"UserProductView", 'String'>
  readonly productId: Prisma.FieldRef<"UserProductView", 'String'>
  readonly viewedAt: Prisma.FieldRef<"UserProductView", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserProductView findUnique
 */
export type UserProductViewFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProductView
   */
  select?: Prisma.UserProductViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProductView
   */
  omit?: Prisma.UserProductViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProductViewInclude<ExtArgs> | null
  /**
   * Filter, which UserProductView to fetch.
   */
  where: Prisma.UserProductViewWhereUniqueInput
}

/**
 * UserProductView findUniqueOrThrow
 */
export type UserProductViewFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProductView
   */
  select?: Prisma.UserProductViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProductView
   */
  omit?: Prisma.UserProductViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProductViewInclude<ExtArgs> | null
  /**
   * Filter, which UserProductView to fetch.
   */
  where: Prisma.UserProductViewWhereUniqueInput
}

/**
 * UserProductView findFirst
 */
export type UserProductViewFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProductView
   */
  select?: Prisma.UserProductViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProductView
   */
  omit?: Prisma.UserProductViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProductViewInclude<ExtArgs> | null
  /**
   * Filter, which UserProductView to fetch.
   */
  where?: Prisma.UserProductViewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserProductViews to fetch.
   */
  orderBy?: Prisma.UserProductViewOrderByWithRelationInput | Prisma.UserProductViewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserProductViews.
   */
  cursor?: Prisma.UserProductViewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserProductViews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserProductViews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserProductViews.
   */
  distinct?: Prisma.UserProductViewScalarFieldEnum | Prisma.UserProductViewScalarFieldEnum[]
}

/**
 * UserProductView findFirstOrThrow
 */
export type UserProductViewFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProductView
   */
  select?: Prisma.UserProductViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProductView
   */
  omit?: Prisma.UserProductViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProductViewInclude<ExtArgs> | null
  /**
   * Filter, which UserProductView to fetch.
   */
  where?: Prisma.UserProductViewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserProductViews to fetch.
   */
  orderBy?: Prisma.UserProductViewOrderByWithRelationInput | Prisma.UserProductViewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserProductViews.
   */
  cursor?: Prisma.UserProductViewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserProductViews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserProductViews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserProductViews.
   */
  distinct?: Prisma.UserProductViewScalarFieldEnum | Prisma.UserProductViewScalarFieldEnum[]
}

/**
 * UserProductView findMany
 */
export type UserProductViewFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProductView
   */
  select?: Prisma.UserProductViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProductView
   */
  omit?: Prisma.UserProductViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProductViewInclude<ExtArgs> | null
  /**
   * Filter, which UserProductViews to fetch.
   */
  where?: Prisma.UserProductViewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserProductViews to fetch.
   */
  orderBy?: Prisma.UserProductViewOrderByWithRelationInput | Prisma.UserProductViewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserProductViews.
   */
  cursor?: Prisma.UserProductViewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserProductViews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserProductViews.
   */
  skip?: number
  distinct?: Prisma.UserProductViewScalarFieldEnum | Prisma.UserProductViewScalarFieldEnum[]
}

/**
 * UserProductView create
 */
export type UserProductViewCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProductView
   */
  select?: Prisma.UserProductViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProductView
   */
  omit?: Prisma.UserProductViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProductViewInclude<ExtArgs> | null
  /**
   * The data needed to create a UserProductView.
   */
  data: Prisma.XOR<Prisma.UserProductViewCreateInput, Prisma.UserProductViewUncheckedCreateInput>
}

/**
 * UserProductView createMany
 */
export type UserProductViewCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserProductViews.
   */
  data: Prisma.UserProductViewCreateManyInput | Prisma.UserProductViewCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserProductView createManyAndReturn
 */
export type UserProductViewCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProductView
   */
  select?: Prisma.UserProductViewSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserProductView
   */
  omit?: Prisma.UserProductViewOmit<ExtArgs> | null
  /**
   * The data used to create many UserProductViews.
   */
  data: Prisma.UserProductViewCreateManyInput | Prisma.UserProductViewCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProductViewIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * UserProductView update
 */
export type UserProductViewUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProductView
   */
  select?: Prisma.UserProductViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProductView
   */
  omit?: Prisma.UserProductViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProductViewInclude<ExtArgs> | null
  /**
   * The data needed to update a UserProductView.
   */
  data: Prisma.XOR<Prisma.UserProductViewUpdateInput, Prisma.UserProductViewUncheckedUpdateInput>
  /**
   * Choose, which UserProductView to update.
   */
  where: Prisma.UserProductViewWhereUniqueInput
}

/**
 * UserProductView updateMany
 */
export type UserProductViewUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserProductViews.
   */
  data: Prisma.XOR<Prisma.UserProductViewUpdateManyMutationInput, Prisma.UserProductViewUncheckedUpdateManyInput>
  /**
   * Filter which UserProductViews to update
   */
  where?: Prisma.UserProductViewWhereInput
  /**
   * Limit how many UserProductViews to update.
   */
  limit?: number
}

/**
 * UserProductView updateManyAndReturn
 */
export type UserProductViewUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProductView
   */
  select?: Prisma.UserProductViewSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserProductView
   */
  omit?: Prisma.UserProductViewOmit<ExtArgs> | null
  /**
   * The data used to update UserProductViews.
   */
  data: Prisma.XOR<Prisma.UserProductViewUpdateManyMutationInput, Prisma.UserProductViewUncheckedUpdateManyInput>
  /**
   * Filter which UserProductViews to update
   */
  where?: Prisma.UserProductViewWhereInput
  /**
   * Limit how many UserProductViews to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProductViewIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * UserProductView upsert
 */
export type UserProductViewUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProductView
   */
  select?: Prisma.UserProductViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProductView
   */
  omit?: Prisma.UserProductViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProductViewInclude<ExtArgs> | null
  /**
   * The filter to search for the UserProductView to update in case it exists.
   */
  where: Prisma.UserProductViewWhereUniqueInput
  /**
   * In case the UserProductView found by the `where` argument doesn't exist, create a new UserProductView with this data.
   */
  create: Prisma.XOR<Prisma.UserProductViewCreateInput, Prisma.UserProductViewUncheckedCreateInput>
  /**
   * In case the UserProductView was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserProductViewUpdateInput, Prisma.UserProductViewUncheckedUpdateInput>
}

/**
 * UserProductView delete
 */
export type UserProductViewDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProductView
   */
  select?: Prisma.UserProductViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProductView
   */
  omit?: Prisma.UserProductViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProductViewInclude<ExtArgs> | null
  /**
   * Filter which UserProductView to delete.
   */
  where: Prisma.UserProductViewWhereUniqueInput
}

/**
 * UserProductView deleteMany
 */
export type UserProductViewDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserProductViews to delete
   */
  where?: Prisma.UserProductViewWhereInput
  /**
   * Limit how many UserProductViews to delete.
   */
  limit?: number
}

/**
 * UserProductView without action
 */
export type UserProductViewDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProductView
   */
  select?: Prisma.UserProductViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProductView
   */
  omit?: Prisma.UserProductViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProductViewInclude<ExtArgs> | null
}
